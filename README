# In this repo, I am putting together the python code for the DSA questions that Iam solving daily.
# mf.py
* Explanation:
Q1. Most frequently occuring item in an array: Write a function that takes an array and returns the most commonly occuring item.
    - For example: Let's say we have an array [1,3,1,3,2,1]. Here 1 is the most frequently ocurring item. 
  - We need to follow some steps:
# Step 1: Ask Clarifying Questions
- Before jumping into coding, it's always a good idea to clarify the problem to ensure that we meet all requirements. 

- Some important questions to ask the interviewer:
- Can the input list be empty?

- If yes, what should we return? (Here, it seems the expected return is None.)
- What if there are multiple elements with the same maximum frequency?

- Should we return the first one that appears, or do we need to return all of them?
- What type of values can be in the list?

- Can the list contain negative numbers, floating-point numbers, or just integers?
- Can it contain non-numeric elements like strings or None values?
- What are the constraints on input size?

- This helps determine if an O(n log n) solution (like sorting) is acceptable or if we need an O(n) solution.

# Step 2: Explain the Code, how it works:
- We initialize a dictionary count to keep track of element frequencies.
- We iterate through the list and update the frequency count for each element.
- While updating the count, we also track the maximum frequency (max_count) and the corresponding item (max_item).
- The function returns the most frequent item after a single pass through the list.

# Step 3: Analyze Time & Space Complexity
- Time Complexity:
  - We iterate through the list once â†’ O(n)
  - Each lookup and insertion in a dictionary takes O(1) on average.
  - Overall, this solution runs in O(n) time complexity, which is optimal for this problem.
- Space Complexity (this might not be much needed as we have optimized storage systems these days:
  - We store counts in a dictionary, which in the worst case could store all n unique elements.
  - This results in an O(n) space complexity.
## After analysis of the runtime and memory, it might be good to answer some Qs like
    - Why is this Optimal? To explain this, I think the best way for me is to compare bruteforce, sorting approach and then finally the dictionary/ hash map approach.
    - testing some edge cases and use cases
Q2. 

